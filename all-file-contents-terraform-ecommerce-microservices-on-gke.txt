
.github/ISSUE_TEMPLATE/bug_report.md:
---
name: Bug report
about: Report a bug or error with this repository.

---

<!--
Thank you for reporting the issue! :)

Someone else might have already reported the issue. Please double check the existing list of issues: https://github.com/GoogleCloudPlatform/terraform-ecommerce-microservices-on-gke/issues?q=is%3Aissue

If you have a support contract with Google, please create an issue in the [support console](https://cloud.google.com/support/) instead of filing on GitHub. This will ensure a timely response.
-->

#### Environment details

- Operating System:
- Terraform version:
- gcloud version:
- kubectl version:

#### Steps to reproduce

  1. ?
  2. ?

.github/ISSUE_TEMPLATE/feature_request.md:
---
name: Feature request
about: Suggest an idea for this repository.

---

<!--
If you have a support contract with Google, please create an issue in the [support console](https://cloud.google.com/support/) instead of GitHub. This will ensure a timely response.
-->

 **Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
 **Describe the solution you'd like**
A clear and concise description of what you want to happen.
 **Describe alternatives you've considered**
A description of any alternative solutions or features you've considered.
 **Additional context**
Add any other context or screenshots about the feature request here.

.github/PULL_REQUEST_TEMPLATE.md:
Thank you for opening a pull request! Please:
- [ ] Read CONTRIBUTING.md: https://github.com/GoogleCloudPlatform/terraform-ecommerce-microservices-on-gke/blob/main/CONTRIBUTING.md
- [ ] Create or find the associated GitHub Issue for this pull-request, unless this is a small change (e.g., typo fix).
- [ ] Describe if and how you tested the changes.
- [ ] Provide instructions for reviewers.
- [ ] Perform a review of the file changes yourself. You should be the first reviewer of your own pull-requests.

.github/conventional-commit-lint.yaml:
# Copyright 2022-2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is automatically generated from:
# https://github.com/GoogleCloudPlatform/cloud-foundation-toolkit/blob/master/infra/terraform/test-org/github

enabled: true
always_check_pr_title: true

.github/snippet-bot.yml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Presubmit test to check for mismatched region tags in PRs
# https://github.com/googleapis/repo-automation-bots/tree/main/packages/snippet-bot
# Install: https://github.com/apps/snippet-bot

.github/sync-repo-settings.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Synchronize repository settings from a centralized config
# https://github.com/googleapis/repo-automation-bots/tree/main/packages/sync-repo-settings
# Install: https://github.com/apps/sync-repo-settings

# Disable merge commits
rebaseMergeAllowed: true
squashMergeAllowed: true
mergeCommitAllowed: false
# Enable branch protection
branchProtectionRules:
- pattern: main
  isAdminEnforced: true
  requiredStatusCheckContexts:
    - 'cla/google'
  # - Add required status checks like presubmit tests
  requiredApprovingReviewCount: 1
  requiresCodeOwnerReviews: true
  requiresStrictStatusChecks: true

# Set team access
permissionRules:
  - team: TEAM_NAME
    permission: admin

.github/trusted-contribution.yml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is automatically generated from:
# https://github.com/GoogleCloudPlatform/cloud-foundation-toolkit/blob/master/infra/terraform/test-org/github

annotations:
  - type: comment
    text: "/gcbrun"
trustedContributors:
  - release-please[bot]
  - renovate[bot]
  - renovate-bot
  - forking-renovate[bot]
  - dependabot[bot]

.github/workflows/lint.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is automatically generated from values at:
# https://github.com/GoogleCloudPlatform/cloud-foundation-toolkit/blob/master/infra/terraform/test-org/org/locals.tf

name: 'lint'

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  lint:
    name: 'lint'
    runs-on: 'ubuntu-latest'
    steps:
      - uses: 'actions/checkout@v4'
      - id: variables
        run: |
          MAKEFILE=$(find . -name Makefile -print -quit)
          if [ -z "$MAKEFILE" ]; then
            echo dev-tools=gcr.io/cloud-foundation-cicd/cft/developer-tools:1 >> "$GITHUB_OUTPUT"
          else
            VERSION=$(grep "DOCKER_TAG_VERSION_DEVELOPER_TOOLS := " $MAKEFILE | cut -d\  -f3)
            IMAGE=$(grep "DOCKER_IMAGE_DEVELOPER_TOOLS := " $MAKEFILE | cut -d\  -f3)
            REGISTRY=$(grep "REGISTRY_URL := " $MAKEFILE | cut -d\  -f3)
            echo dev-tools=${REGISTRY}/${IMAGE}:${VERSION} >> "$GITHUB_OUTPUT"
          fi
      - run: docker run --rm -e ENABLE_BPMETADATA -v ${{ github.workspace }}:/workspace ${{ steps.variables.outputs.dev-tools }} module-swapper
        env:
          ENABLE_BPMETADATA: 1

      - run: docker run --rm -e ENABLE_BPMETADATA -v ${{ github.workspace }}:/workspace ${{ steps.variables.outputs.dev-tools }} /usr/local/bin/test_lint.sh
        env:
          ENABLE_BPMETADATA: 1


.github/workflows/periodic-reporter.yaml:
# Copyright 2023-2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is automatically generated from:
# https://github.com/GoogleCloudPlatform/cloud-foundation-toolkit/blob/master/infra/terraform/modules/workflow_files/periodic-reporter.yaml

name: 'reporter'

on:
  schedule:
    # 2 hours after scheduled periodic and once again in the evening
    - cron: '0 5,17 * * *'
  workflow_dispatch:

jobs:
  report:
    if: github.repository_owner == 'GoogleCloudPlatform' || github.repository_owner == 'terraform-google-modules'

    permissions:
      issues: 'write'

    runs-on: 'ubuntu-latest'

    steps:
      - uses: 'actions/github-script@v7'
        with:
          script: |-
                  // label for all issues opened by reporter
                  const periodicLabel = 'periodic-failure';

                  // check if any reporter opened any issues previously
                  const prevIssues = await github.paginate(github.rest.issues.listForRepo, {
                    ...context.repo,
                    state: 'open',
                    creator: 'github-actions[bot]',
                    labels: [periodicLabel]
                  });
                  // createOrCommentIssue creates a new issue or comments on an existing issue.
                  const createOrCommentIssue = async function (title, txt) {
                    if (prevIssues.length < 1) {
                      console.log('no previous issues found, creating one');
                      await github.rest.issues.create({
                        ...context.repo,
                        title: title,
                        body: txt,
                        labels: [periodicLabel]
                      });
                      return;
                    }
                    if (prevIssues.length > 1) {
                      console.warn(
                        `found ${prevIssues.length} issues but only adding comment to ${prevIssues[0].html_url}`
                      );
                    }
                    console.log(
                      `found previous issue ${prevIssues[0].html_url}, adding comment`
                    );
                    await github.rest.issues.createComment({
                      ...context.repo,
                      issue_number: prevIssues[0].number,
                      body: txt
                    });
                  };

                  // updateAndCloseIssues comments on any existing issues and closes them. No-op if no issue exists.
                  const updateAndCloseIssues = async function (txt) {
                    if (prevIssues.length < 1) {
                      console.log('no previous issues found, skipping close');
                      return;
                    }
                    for (const prevIssue of prevIssues) {
                      console.log(`found previous issue ${prevIssue.html_url}, adding comment`);
                      await github.rest.issues.createComment({
                        ...context.repo,
                        issue_number: prevIssue.number,
                        body: txt
                      });
                      console.log(`closing ${prevIssue.html_url}`);
                      await github.rest.issues.update({
                        ...context.repo,
                        issue_number: prevIssue.number,
                        body: txt,
                        state: 'closed'
                      });
                    }
                  };

                  // Find status of check runs.
                  // We will find check runs for each commit and then filter for the periodic.
                  // Checks API only allows for ref and if we use main there could be edge cases where
                  // the check run happened on a SHA that is different from head.
                  const commits = await github.paginate(github.rest.repos.listCommits, {
                    ...context.repo
                  });

                  var foundCheck = false;
                  let periodicCheck = {};

                  for (const commit of commits) {
                    console.log(
                      `checking runs at ${commit.html_url}: ${commit.commit.message}`
                    );
                    const checks = await github.rest.checks.listForRef({
                      ...context.repo,
                      ref: commit.sha
                    });
                    // find runs for this commit
                    for (const check of checks.data.check_runs) {
                      console.log(`found run ${check.name} for ${commit.html_url}`);
                      if (check.name.includes('periodic-int-trigger')) {
                        foundCheck = true;
                        periodicCheck = check;
                        break;
                      }
                    }

                    if (foundCheck) {
                      if (
                        periodicCheck.status === 'completed' &&
                        periodicCheck.conclusion === 'success'
                      ) {
                        updateAndCloseIssues(
                          `[Passing periodic](${periodicCheck.html_url}) at ${commit.html_url}. Closing this issue.`
                        );
                      } else if (periodicCheck.status === 'in_progress') {
                        console.log(
                          `Check is pending ${periodicCheck.html_url} for ${commit.html_url}. Retry again later.`
                        );
                      }
                      // error case
                      else {
                        createOrCommentIssue(
                          'Failing periodic',
                          `[Failing periodic](${periodicCheck.html_url}) at ${commit.html_url}.`
                        );
                      }
                      // exit early as check was found
                      return;
                    }
                  }

                  // no periodic-int-trigger checks found across all commits, report it
                  createOrCommentIssue(
                    'Missing periodic',
                    `Periodic test has not run in the past 24hrs. Last checked from ${
                      commits[0].html_url
                    } to ${commits[commits.length - 1].html_url}.`
                  );

.github/workflows/stale.yml:
# Copyright 2022-2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is automatically generated from:
# https://github.com/GoogleCloudPlatform/cloud-foundation-toolkit/blob/master/infra/terraform/test-org/github

name: "Close stale issues"
on:
  schedule:
  - cron: "0 23 * * *"

jobs:
  stale:
    if: github.repository_owner == 'GoogleCloudPlatform' || github.repository_owner == 'terraform-google-modules'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/stale@v9
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        stale-issue-message: 'This issue is stale because it has been open 60 days with no activity. Remove stale label or comment or this will be closed in 7 days'
        stale-pr-message: 'This PR is stale because it has been open 60 days with no activity. Remove stale label or comment or this will be closed in 7 days'
        exempt-issue-labels: 'triaged'
        exempt-pr-labels: 'dependencies,autorelease: pending'

CODE_OF_CONDUCT.md:
<!-- # Generated by synthtool. DO NOT EDIT! !-->
# Code of Conduct

## Our Pledge

In the interest of fostering an open and welcoming environment, we as
contributors and maintainers pledge to making participation in our project and
our community a harassment-free experience for everyone, regardless of age, body
size, disability, ethnicity, gender identity and expression, level of
experience, education, socio-economic status, nationality, personal appearance,
race, religion, or sexual identity and orientation.

## Our Standards

Examples of behavior that contributes to creating a positive environment
include:

*   Using welcoming and inclusive language
*   Being respectful of differing viewpoints and experiences
*   Gracefully accepting constructive criticism
*   Focusing on what is best for the community
*   Showing empathy towards other community members

Examples of unacceptable behavior by participants include:

*   The use of sexualized language or imagery and unwelcome sexual attention or
    advances
*   Trolling, insulting/derogatory comments, and personal or political attacks
*   Public or private harassment
*   Publishing others' private information, such as a physical or electronic
    address, without explicit permission
*   Other conduct which could reasonably be considered inappropriate in a
    professional setting

## Our Responsibilities

Project maintainers are responsible for clarifying the standards of acceptable
behavior and are expected to take appropriate and fair corrective action in
response to any instances of unacceptable behavior.

Project maintainers have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, or to ban temporarily or permanently any
contributor for other behaviors that they deem inappropriate, threatening,
offensive, or harmful.

## Scope

This Code of Conduct applies both within project spaces and in public spaces
when an individual is representing the project or its community. Examples of
representing a project or community include using an official project e-mail
address, posting via an official social media account, or acting as an appointed
representative at an online or offline event. Representation of a project may be
further defined and clarified by project maintainers.

This Code of Conduct also applies outside the project spaces when the Project
Steward has a reasonable belief that an individual's behavior may have a
negative impact on the project or its community.

## Conflict Resolution

We do not believe that all conflict is bad; healthy debate and disagreement
often yield positive results. However, it is never okay to be disrespectful or
to engage in behavior that violates the project’s code of conduct.

If you see someone violating the code of conduct, you are encouraged to address
the behavior directly with those involved. Many issues can be resolved quickly
and easily, and this gives people more control over the outcome of their
dispute. If you are unable to resolve the matter for any reason, or if the
behavior is threatening or harassing, report it. We are dedicated to providing
an environment where participants feel welcome and safe.

Reports should be directed to *googleapis-stewards@google.com*, the
Project Steward(s) for *Google Cloud Client Libraries*. It is the Project Steward’s duty to
receive and address reported violations of the code of conduct. They will then
work with a committee consisting of representatives from the Open Source
Programs Office and the Google Open Source Strategy team. If for any reason you
are uncomfortable reaching out to the Project Steward, please email
opensource@google.com.

We will investigate every complaint, but you may not receive a direct response.
We will use our discretion in determining when and how to follow up on reported
incidents, which may range from not taking action to permanent expulsion from
the project and project-sponsored spaces. We will notify the accused of the
report and provide them an opportunity to discuss it before any action is taken.
The identity of the reporter will be omitted from the details of the report
supplied to the accused. In potentially harmful situations, such as ongoing
harassment or threats to anyone's safety, we may take action without notice.

## Attribution

This Code of Conduct is adapted from the Contributor Covenant, version 1.4,
available at
https://www.contributor-covenant.org/version/1/4/code-of-conduct.html

CONTRIBUTING.md:
# How to Contribute

We'd love to accept your patches and contributions to this project. There are
just a few small guidelines you need to follow.

## Contributor License Agreement

Contributions to this project must be accompanied by a Contributor License
Agreement (CLA). You (or your employer) retain the copyright to your
contribution; this simply gives us permission to use and redistribute your
contributions as part of the project. Head over to
<https://cla.developers.google.com/> to see your current agreements on file or
to sign a new one.

You generally only need to submit a CLA once, so if you've already submitted one
(even if it was for a different project), you probably don't need to do it
again.

## Code Reviews

All submissions, including submissions by project members, require review. We
use GitHub pull requests for this purpose. Consult
[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more
information on using pull requests.

## Community Guidelines

This project follows
[Google's Open Source Community Guidelines](https://opensource.google/conduct/).

README.md:
# Ecommerce web app deployed on Kubernetes

This GitHub repository contains the Terraform and Kubernetes YAML used by the Jump Start Solution (JSS) entitled [_Ecommerce web app deployed on Kubernetes_](https://console.cloud.google.com/products/solutions/details/ecomm-microservices), available on Google Cloud.

The [Deploy this solution](#deploy-this-solution) section below contains a brief summary of how you can deploy this solution to your Google Cloud project. For more detailed instructions including troubleshooting guidance, see the [solution guide](https://cloud.google.com/architecture/application-development/ecommerce-microservices).

## What's deployed?

The following is a description of what's deployed by this solution:
1. **Cymbal Shops**: This solution deploys a demo application called [Cymbal Shops](https://github.com/GoogleCloudPlatform/microservices-demo) (also known as Online Boutique). Cymbal Shops consists of about 10 microservices. The source code of each microservice is available in a [separate, open source GitHub repository](https://github.com/GoogleCloudPlatform/microservices-demo).
1. **3 Google Kubernetes Engine (GKE) clusters**: This solution provisions a total of 3 GKE cluster — 2 clusters in the US, and 1 cluster in Europe. One of the US clusters will be used for configuring multi-cluster ingress, while the other 2 clusters will host the microservices of the Cymbal Shops application (including the frontend microservice).
1. **Static external IP address**: The Cymbal Shops application will be pubicly acessible via an IP address, reserved and output (into your command line interface) by the Terraform. The IP address may take about 5 minutes to actually serve the frontend since multi-cluster ingress takes a few minutes to warm up.
1. **Single Redis _cart_ database**: The items in users' carts are managed in a single Redis databases, only deployed to a US cluster — for data consistency.

<img src="/docs/architectural-diagram.png" alt="Architectural diagram showing the Cymbal Shops application's microservices deployed into 2 GKE clusters — one in the US, and one in Europe. A third cluster in the US contains Kubernetes resources for MultiClusterIngress and MultiClusterService." height="650" />

To learn more about the deployed infrastructure, read the [solution guide on cloud.google.com](https://cloud.google.com/architecture/application-development/ecommerce-microservices).

## Deploy this solution

The best way to deploy this solution is through the [Jump Start Solutions page](https://console.cloud.google.com/products/solutions/details/ecomm-microservices) on Google Cloud Console. But if you specifically want to deploy the Terraform inside this git branch or commit, follow the instructions below.

### Prerequisites

* A terminal environment with the following CLI tools available:
  * `terraform`
  * `gcloud`
* A Google Cloud project that is **not** currently using a [Multi Cluster Ingress](https://cloud.google.com/kubernetes-engine/docs/concepts/multi-cluster-ingress#architecture).

### Steps

#### 1. Clone this git repository.

```
git clone https://github.com/GoogleCloudPlatform/terraform-ecommerce-microservices-on-gke
```

#### 2. Go into the `infra/` folder.

```
cd terraform-ecommerce-microservices-on-gke/infra
```

The `infra/` directory contains all the Terraform code for this solution.

#### 3. Run the Terraform.

```
terraform init
terraform apply -var 'project_id=MY_PROJECT_ID'
```

Replace `MY_PROJECT_ID` with your [Google Cloud Project](https://cloud.google.com/resource-manager/docs/creating-managing-projects) ID. We recommend creating a new project so you can easily clean up all resources by deleting the entire project.

You may need to type "Yes", after you run `terraform apply`.

#### 4. Report any bugs as a GitHub Issue.

a. Search the [existing list of GitHub issues](https://github.com/GoogleCloudPlatform/terraform-ecommerce-microservices-on-gke/issues?q=is%3Aissue).

b. If there isn't already a GitHub issue for your bug, [create a new GitHub issue](https://github.com/GoogleCloudPlatform/terraform-ecommerce-microservices-on-gke/issues/new/choose).

#### 5. Get the IP address of the deployment.

Get the external IP address where Cymbal Shops will be accessible about 5 minutes _after_ `terraform apply` successfully completes:

```
gcloud compute addresses list \
    --filter="name=('multi-cluster-ingress-ip-address-1')" \
    --project=MY_PROJECT_ID
```

Replace `MY_PROJECT_ID` with your [Google Cloud Project](https://cloud.google.com/resource-manager/docs/creating-managing-projects) ID.

<!-- BEGINNING OF PRE-COMMIT-TERRAFORM DOCS HOOK -->
## Inputs

| Name | Description | Type | Default | Required |
|------|-------------|------|---------|:--------:|
| labels | A set of key/value label pairs to assign to the resources deployed by this blueprint. | `map(string)` | `{}` | no |
| project\_id | The Google Cloud project ID. | `string` | n/a | yes |
| resource\_name\_suffix | Optional string added to the end of resource names, allowing project reuse.<br>  This should be short and only contain dashes, lowercase letters, and digits.<br>  It shoud not end with a dash. | `string` | `"-1"` | no |

## Outputs

| Name | Description |
|------|-------------|
| deployment\_ip\_address | Public IP address of the deployment |
| neos\_toc\_url | Neos Tutorial URL |

<!-- END OF PRE-COMMIT-TERRAFORM DOCS HOOK -->

## Contributing

If you would like to contribute to this repository, read [CONTRIBUTING](CONTRIBUTING.md).

Please note that this project is released with a Contributor Code of Conduct. By participating in
this project you agree to abide by its terms. See [Code of Conduct](CODE_OF_CONDUCT.md) for more
information.

## License

Apache 2.0 - See [LICENSE](LICENSE) for more information.

SECURITY.md:
# Security Policy

To report a security issue, please use [g.co/vulnz](https://g.co/vulnz).

The Google Security Team will respond within 5 working days of your report on g.co/vulnz.

We use g.co/vulnz for our intake, and do coordination and disclosure here using GitHub Security Advisory to privately discuss and fix the issue.

build/int.cloudbuild.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

timeout: 3600s
steps:
- id: prepare
  dir: infra
  name: 'gcr.io/cloud-foundation-cicd/$_DOCKER_IMAGE_DEVELOPER_TOOLS:$_DOCKER_TAG_VERSION_DEVELOPER_TOOLS'
  args: ['/bin/bash', '-c', 'source /usr/local/bin/task_helper_functions.sh && prepare_environment']
  env:
  - 'TF_VAR_org_id=$_ORG_ID'
  - 'TF_VAR_folder_id=$_FOLDER_ID'
  - 'TF_VAR_billing_account=$_LR_BILLING_ACCOUNT'
- id: simple-example-init
  dir: infra
  name: 'gcr.io/cloud-foundation-cicd/$_DOCKER_IMAGE_DEVELOPER_TOOLS:$_DOCKER_TAG_VERSION_DEVELOPER_TOOLS'
  args: ['/bin/bash', '-c', 'cft test run TestSimpleExample --stage init --verbose']
- id: simple-example-apply
  dir: infra
  name: 'gcr.io/cloud-foundation-cicd/$_DOCKER_IMAGE_DEVELOPER_TOOLS:$_DOCKER_TAG_VERSION_DEVELOPER_TOOLS'
  args: ['/bin/bash', '-c', 'cft test run TestSimpleExample --stage apply --verbose']
- id: simple-example-verify
  dir: infra
  name: 'gcr.io/cloud-foundation-cicd/$_DOCKER_IMAGE_DEVELOPER_TOOLS:$_DOCKER_TAG_VERSION_DEVELOPER_TOOLS'
  args: ['/bin/bash', '-c', 'cft test run TestSimpleExample --stage verify --verbose']
- id: simple-example-teardown
  dir: infra
  name: 'gcr.io/cloud-foundation-cicd/$_DOCKER_IMAGE_DEVELOPER_TOOLS:$_DOCKER_TAG_VERSION_DEVELOPER_TOOLS'
  args: ['/bin/bash', '-c', 'cft test run TestSimpleExample --stage teardown --verbose']
tags:
- 'ci'
- 'integration'
substitutions:
  _DOCKER_IMAGE_DEVELOPER_TOOLS: 'cft/developer-tools'
  _DOCKER_TAG_VERSION_DEVELOPER_TOOLS: '1'

cloudbuild_mim.yaml:
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
steps:
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash'
  args: ['./deploy_via_trigger.sh', '-p$PROJECT_ID']
serviceAccount: 'projects/$PROJECT_ID/serviceAccounts/cloudbuild-trigger-default@$PROJECT_ID.iam.gserviceaccount.com'
options:
  logging: CLOUD_LOGGING_ONLY

deploy_solution.sh:
#!/bin/bash
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
set -o pipefail

handle_error() {
    local exit_code=$?
    exit $exit_code
}
trap 'handle_error' ERR

SOLUTION_ID="ecomm-microservices"

echo "Fetching Project ID"
PROJECT_ID=$(gcloud config get project)
echo "Project ID is ${PROJECT_ID}"

# Iterate over the infra manager location to identify the deployment
# currently one deployment per project is only supported
# in future if multiple deployments are supported per project this will need to change
IM_SUPPORTED_REGIONS=("us-central1" "europe-west1" "asia-east1")

for REGION in "${IM_SUPPORTED_REGIONS[@]}"; do
    DEPLOYMENT_NAME=$(gcloud infra-manager deployments list --location "${REGION}" \
                        --filter="labels.goog-solutions-console-deployment-name:* AND \
                        labels.goog-solutions-console-solution-id:${SOLUTION_ID}" \
                        --format='value(name)')
    if [ -n "$DEPLOYMENT_NAME" ]; then
        break
    fi
done
if [ -z "$DEPLOYMENT_NAME" ]; then
	echo "Failed to find the existing deployment, exiting now!"
	exit 1
fi
echo "Region is ${REGION}"
echo "Deployment name is ${DEPLOYMENT_NAME}"

SERVICE_ACCOUNT=$(gcloud infra-manager deployments describe "${DEPLOYMENT_NAME}" --location "${REGION}" --format='value(serviceAccount)')

echo "Assigning required roles to the service account ${SERVICE_ACCOUNT}"
# Iterate over the roles and check if the service account already has that role
# assigned. If it has then skip adding that policy binding as using
# --condition=None can overwrite any existing conditions in the binding.
CURRENT_POLICY=$(gcloud projects get-iam-policy "${PROJECT_ID}" --format=json)
MEMBER_EMAIL=$(echo "${SERVICE_ACCOUNT}" | awk -F '/' '{print $NF}')
MEMBER="serviceAccount:${MEMBER_EMAIL}"

while IFS= read -r role || [[ -n "$role" ]]
do \
if echo "$CURRENT_POLICY" | jq -e --arg role "$role" --arg member "$MEMBER" '.bindings[] | select(.role == $role) | .members[] | select(. == $member)' > /dev/null; then \
    echo "IAM policy binding already exists for member ${MEMBER} and role ${role}"
else \
    gcloud projects add-iam-policy-binding "${PROJECT_ID}" \
    --member="$MEMBER" \
    --role="$role" \
    --condition=None
fi
done < "roles.txt"

DEPLOYMENT_DESCRIPTION=$(gcloud infra-manager deployments describe "${DEPLOYMENT_NAME}" --location "${REGION}" --format json)
cat <<EOF > input.tfvars
# Do not edit the region as changing the region can lead to failed deployment.
region="$(echo "$DEPLOYMENT_DESCRIPTION" | jq -r '.terraformBlueprint.inputValues.region.inputValue')"
project_id = "${PROJECT_ID}"
labels = {
  "goog-solutions-console-deployment-name" = "${DEPLOYMENT_NAME}",
  "goog-solutions-console-solution-id" = "${SOLUTION_ID}"
}
EOF

echo "An input.tfvars has been created in the current directory with a set of default input terraform variables for the solution. You can modify their values or go ahead with the defaults."
read -r -p "Once done, press Enter to continue: "

echo "Creating the cloud storage bucket if it does not exist already"
BUCKET_NAME="${PROJECT_ID}_infra_manager_staging"
if ! gsutil ls "gs://$BUCKET_NAME" &> /dev/null; then
    gsutil mb "gs://$BUCKET_NAME/"
    echo "Bucket $BUCKET_NAME created successfully."
else
    echo "Bucket $BUCKET_NAME already exists. Moving on to the next step."
fi

echo "Deploying the solution"
gcloud infra-manager deployments apply projects/"${PROJECT_ID}"/locations/"${REGION}"/deployments/"${DEPLOYMENT_NAME}" --service-account "${SERVICE_ACCOUNT}" --local-source="infra" --inputs-file="input.tfvars" --labels="modification-reason=make-it-mine,goog-solutions-console-deployment-name=${DEPLOYMENT_NAME},goog-solutions-console-solution-id=${SOLUTION_ID},goog-config-partner=sc"

deploy_via_trigger.sh:
#!/bin/bash
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o pipefail

handle_error() {
    local exit_code=$?
    exit $exit_code
}
trap 'handle_error' ERR

while getopts p: flag
do
    case "${flag}" in
        p) PROJECT_ID=${OPTARG};;
        *) echo "usage: $0 [-p PROJECT_ID]" >&2
           exit 1 ;;
    esac
done

if [ -z "$PROJECT_ID" ]; then
	echo "Failed to read the project id, exiting now!"
	exit 1
fi

SOLUTION_ID="ecomm-microservices"

# Iterate over the infra manager location to identify the deployment
# currently one deployment per project is only supported
# in future if multiple deployments are supported per project this will need to change
IM_SUPPORTED_REGIONS=("us-central1" "europe-west1" "asia-east1")

for REGION in "${IM_SUPPORTED_REGIONS[@]}"; do
    DEPLOYMENT_NAME=$(gcloud infra-manager deployments list --location "${REGION}" \
                        --filter="labels.goog-solutions-console-deployment-name:* AND \
                        labels.goog-solutions-console-solution-id:${SOLUTION_ID}" \
                        --format='value(name)')
    if [ -n "$DEPLOYMENT_NAME" ]; then
        break
    fi
done
if [ -z "$DEPLOYMENT_NAME" ]; then
	echo "Failed to find the existing deployment, exiting now!"
	exit 1
fi
echo "Project ID is ${PROJECT_ID}"
echo "Region is ${REGION}"
echo "Deployment name is ${DEPLOYMENT_NAME}"

SERVICE_ACCOUNT=$(gcloud infra-manager deployments describe "${DEPLOYMENT_NAME}" --location "${REGION}" --format='value(serviceAccount)')

echo "Assigning required roles to the service account ${SERVICE_ACCOUNT}"
# Iterate over the roles and check if the service account already has that role
# assigned. If it has then skip adding that policy binding as using
# --condition=None can overwrite any existing conditions in the binding.
CURRENT_POLICY=$(gcloud projects get-iam-policy "${PROJECT_ID}" --format=json)
MEMBER_EMAIL=$(echo "${SERVICE_ACCOUNT}" | awk -F '/' '{print $NF}')
MEMBER="serviceAccount:${MEMBER_EMAIL}"
apt-get install jq -y
while IFS= read -r role || [[ -n "$role" ]]
do \
if echo "$CURRENT_POLICY" | jq -e --arg role "$role" --arg member "$MEMBER" '.bindings[] | select(.role == $role) | .members[] | select(. == $member)' > /dev/null; then \
    echo "IAM policy binding already exists for member ${MEMBER} and role ${role}"
else \
    gcloud projects add-iam-policy-binding "${PROJECT_ID}" \
    --member="$MEMBER" \
    --role="$role" \
    --condition=None
fi
done < "roles.txt"

DEPLOYMENT_DESCRIPTION=$(gcloud infra-manager deployments describe "${DEPLOYMENT_NAME}" --location "${REGION}" --format json)
cat <<EOF > input.tfvars
# Do not edit the region as changing the region can lead to failed deployment.
region="$(echo "$DEPLOYMENT_DESCRIPTION" | jq -r '.terraformBlueprint.inputValues.region.inputValue')"
project_id = "${PROJECT_ID}"
labels = {
  "goog-solutions-console-deployment-name" = "${DEPLOYMENT_NAME}",
  "goog-solutions-console-solution-id" = "${SOLUTION_ID}"
}
EOF

echo "Creating the cloud storage bucket if it does not exist already"
BUCKET_NAME="${PROJECT_ID}_infra_manager_staging"
if ! gsutil ls "gs://$BUCKET_NAME" &> /dev/null; then
    gsutil mb "gs://$BUCKET_NAME/"
    echo "Bucket $BUCKET_NAME created successfully."
else
    echo "Bucket $BUCKET_NAME already exists. Moving on to the next step."
fi

echo "Deploying the solution"
gcloud infra-manager deployments apply projects/"${PROJECT_ID}"/locations/"${REGION}"/deployments/"${DEPLOYMENT_NAME}" --service-account "${SERVICE_ACCOUNT}" --local-source="infra" --inputs-file="input.tfvars" --labels="modification-reason=make-it-mine,goog-solutions-console-deployment-name=${DEPLOYMENT_NAME},goog-solutions-console-solution-id=${SOLUTION_ID},goog-config-partner=sc"

infra/Makefile:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Please note that this file was generated from [terraform-google-module-template](https://github.com/terraform-google-modules/terraform-google-module-template).
# Please make sure to contribute relevant changes upstream!

# Make will use bash instead of sh
SHELL := /usr/bin/env bash

DOCKER_TAG_VERSION_DEVELOPER_TOOLS := 1.21
DOCKER_IMAGE_DEVELOPER_TOOLS := cft/developer-tools
REGISTRY_URL := gcr.io/cloud-foundation-cicd
ENABLE_BPMETADATA := 1
export ENABLE_BPMETADATA

# Enter docker container for local development
.PHONY: docker_run
docker_run:
	docker run --rm -it \
		-e SERVICE_ACCOUNT_JSON \
		-v "$(CURDIR)":/workspace \
		$(REGISTRY_URL)/${DOCKER_IMAGE_DEVELOPER_TOOLS}:${DOCKER_TAG_VERSION_DEVELOPER_TOOLS} \
		/bin/bash

# Execute prepare tests within the docker container
.PHONY: docker_test_prepare
docker_test_prepare:
	docker run --rm -it \
		-e SERVICE_ACCOUNT_JSON \
		-e TF_VAR_org_id \
		-e TF_VAR_folder_id \
		-e TF_VAR_billing_account \
		-v "$(CURDIR)":/workspace \
		$(REGISTRY_URL)/${DOCKER_IMAGE_DEVELOPER_TOOLS}:${DOCKER_TAG_VERSION_DEVELOPER_TOOLS} \
		/usr/local/bin/execute_with_credentials.sh prepare_environment

# Clean up test environment within the docker container
.PHONY: docker_test_cleanup
docker_test_cleanup:
	docker run --rm -it \
		-e SERVICE_ACCOUNT_JSON \
		-e TF_VAR_org_id \
		-e TF_VAR_folder_id \
		-e TF_VAR_billing_account \
		-v "$(CURDIR)":/workspace \
		$(REGISTRY_URL)/${DOCKER_IMAGE_DEVELOPER_TOOLS}:${DOCKER_TAG_VERSION_DEVELOPER_TOOLS} \
		/usr/local/bin/execute_with_credentials.sh cleanup_environment

# Execute lint tests within the docker container
.PHONY: docker_test_lint
docker_test_lint:
	docker run --rm -it \
		-e ENABLE_BPMETADATA \
		-e EXCLUDE_LINT_DIRS \
		-v "$(CURDIR)":/workspace \
		$(REGISTRY_URL)/${DOCKER_IMAGE_DEVELOPER_TOOLS}:${DOCKER_TAG_VERSION_DEVELOPER_TOOLS} \
		/usr/local/bin/test_lint.sh

# Execute lint tests non tty within the docker container
.PHONY: docker_test_lint_gha
docker_test_lint_gha:
	docker run --rm \
		-e EXCLUDE_LINT_DIRS \
		-v "$(CURDIR)":/workspace \
		$(REGISTRY_URL)/${DOCKER_IMAGE_DEVELOPER_TOOLS}:${DOCKER_TAG_VERSION_DEVELOPER_TOOLS} \
		/usr/local/bin/test_lint.sh

# Generate documentation
.PHONY: docker_generate_docs
docker_generate_docs:
	docker run --rm -it \
		-e ENABLE_BPMETADATA \
		-v "$(dir ${CURDIR})":/workspace \
		$(REGISTRY_URL)/${DOCKER_IMAGE_DEVELOPER_TOOLS}:${DOCKER_TAG_VERSION_DEVELOPER_TOOLS} \
		/bin/bash -c 'source /usr/local/bin/task_helper_functions.sh && generate_docs "-d -p infra"'

# Alias for backwards compatibility
.PHONY: generate_docs
generate_docs: docker_generate_docs

infra/README.md:
# Ecommerce web app deployed on Kubernetes

This GitHub repository contains the Terraform and Kubernetes YAML used by the Jump Start Solution (JSS) entitled [_Ecommerce web app deployed on Kubernetes_](https://console.cloud.google.com/products/solutions/details/ecomm-microservices), available on Google Cloud.

The [Deploy this solution](#deploy-this-solution) section below contains a brief summary of how you can deploy this solution to your Google Cloud project. For more detailed instructions including troubleshooting guidance, see the [solution guide](https://cloud.google.com/architecture/application-development/ecommerce-microservices).

## What's deployed?

The following is a description of what's deployed by this solution:
1. **Cymbal Shops**: This solution deploys a demo application called [Cymbal Shops](https://github.com/GoogleCloudPlatform/microservices-demo) (also known as Online Boutique). Cymbal Shops consists of about 10 microservices. The source code of each microservice is available in a [separate, open source GitHub repository](https://github.com/GoogleCloudPlatform/microservices-demo).
1. **3 Google Kubernetes Engine (GKE) clusters**: This solution provisions a total of 3 GKE cluster — 2 clusters in the US, and 1 cluster in Europe. One of the US clusters will be used for configuring multi-cluster ingress, while the other 2 clusters will host the microservices of the Cymbal Shops application (including the frontend microservice).
1. **Static external IP address**: The Cymbal Shops application will be pubicly acessible via an IP address, reserved and output (into your command line interface) by the Terraform. The IP address may take about 5 minutes to actually serve the frontend since multi-cluster ingress takes a few minutes to warm up.
1. **Single Redis _cart_ database**: The items in users' carts are managed in a single Redis databases, only deployed to a US cluster — for data consistency.

<img src="/docs/architectural-diagram.png" alt="Architectural diagram showing the Cymbal Shops application's microservices deployed into 2 GKE clusters — one in the US, and one in Europe. A third cluster in the US contains Kubernetes resources for MultiClusterIngress and MultiClusterService." height="650" />

To learn more about the deployed infrastructure, read the [solution guide on cloud.google.com](https://cloud.google.com/architecture/application-development/ecommerce-microservices).

## Deploy this solution

The best way to deploy this solution is through the [Jump Start Solutions page](https://console.cloud.google.com/products/solutions/details/ecomm-microservices) on Google Cloud Console. But if you specifically want to deploy the Terraform inside this git branch or commit, follow the instructions below.

### Prerequisites

* A terminal environment with the following CLI tools available:
  * `terraform`
  * `gcloud`
* A Google Cloud project that is **not** currently using a [Multi Cluster Ingress](https://cloud.google.com/kubernetes-engine/docs/concepts/multi-cluster-ingress#architecture).

### Steps

#### 1. Clone this git repository.

```
git clone https://github.com/GoogleCloudPlatform/terraform-ecommerce-microservices-on-gke
```

#### 2. Go into the `infra/` folder.

```
cd terraform-ecommerce-microservices-on-gke/infra
```

The `infra/` directory contains all the Terraform code for this solution.

#### 3. Run the Terraform.

```
terraform init
terraform apply -var 'project_id=MY_PROJECT_ID'
```

Replace `MY_PROJECT_ID` with your [Google Cloud Project](https://cloud.google.com/resource-manager/docs/creating-managing-projects) ID. We recommend creating a new project so you can easily clean up all resources by deleting the entire project.

You may need to type "Yes", after you run `terraform apply`.

#### 4. Report any bugs as a GitHub Issue.

a. Search the [existing list of GitHub issues](https://github.com/GoogleCloudPlatform/terraform-ecommerce-microservices-on-gke/issues?q=is%3Aissue).

b. If there isn't already a GitHub issue for your bug, [create a new GitHub issue](https://github.com/GoogleCloudPlatform/terraform-ecommerce-microservices-on-gke/issues/new/choose).

#### 5. Get the IP address of the deployment.

Get the external IP address where Cymbal Shops will be accessible about 5 minutes _after_ `terraform apply` successfully completes:

```
gcloud compute addresses list \
    --filter="name=('multi-cluster-ingress-ip-address-1')" \
    --project=MY_PROJECT_ID
```

Replace `MY_PROJECT_ID` with your [Google Cloud Project](https://cloud.google.com/resource-manager/docs/creating-managing-projects) ID.

<!-- BEGINNING OF PRE-COMMIT-TERRAFORM DOCS HOOK -->
## Inputs

| Name | Description | Type | Default | Required |
|------|-------------|------|---------|:--------:|
| labels | A set of key/value label pairs to assign to the resources deployed by this blueprint. | `map(string)` | `{}` | no |
| project\_id | The Google Cloud project ID. | `string` | n/a | yes |
| resource\_name\_suffix | Optional string added to the end of resource names, allowing project reuse.<br>  This should be short and only contain dashes, lowercase letters, and digits.<br>  It shoud not end with a dash. | `string` | `"-1"` | no |

## Outputs

| Name | Description |
|------|-------------|
| deployment\_ip\_address | Public IP address of the deployment |
| neos\_toc\_url | Neos Tutorial URL |

<!-- END OF PRE-COMMIT-TERRAFORM DOCS HOOK -->

## Contributing

If you would like to contribute to this repository, read [CONTRIBUTING](CONTRIBUTING.md).

Please note that this project is released with a Contributor Code of Conduct. By participating in
this project you agree to abide by its terms. See [Code of Conduct](CODE_OF_CONDUCT.md) for more
information.

## License

Apache 2.0 - See [LICENSE](LICENSE) for more information.

infra/cluster_fleet_memberships.tf:
/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

resource "google_gke_hub_membership" "my_fleet_membership_usa" {
  membership_id = "my-fleet-membership-usa${var.resource_name_suffix}"
  project       = var.project_id
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.my_cluster_usa.id}"
    }
  }
  depends_on = [
    module.enable_multi_cluster_google_apis
  ]
  provider = google-beta
}

resource "google_gke_hub_membership" "my_fleet_membership_europe" {
  membership_id = "my-fleet-membership-europe${var.resource_name_suffix}"
  project       = var.project_id
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.my_cluster_europe.id}"
    }
  }
  depends_on = [
    module.enable_multi_cluster_google_apis
  ]
  provider = google-beta
}

resource "google_gke_hub_membership" "my_fleet_membership_config" {
  membership_id = "my-fleet-membership-config${var.resource_name_suffix}"
  project       = var.project_id
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.my_cluster_config.id}"
    }
  }
  depends_on = [
    module.enable_multi_cluster_google_apis
  ]
  provider = google-beta
}

infra/deploy_helm_charts.tf:
/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Enable access to the configuration of the Google Cloud provider.
data "google_client_config" "default" {}

resource "helm_release" "helm_chart_multi_cluster_ingress" {
  name      = "helm-chart-multi-cluster-ingress"
  chart     = "${path.module}/helm_chart_multi_cluster_ingress"
  namespace = "frontend"
  set {
    name  = "projectId"
    value = var.project_id
  }
  set {
    name  = "resourceNameSuffix"
    value = var.resource_name_suffix
  }
  depends_on = [
    kubernetes_job.kubernetes_manifests_deployer_job, # This allows us to wait for the MCI CRDs.
    time_sleep.wait_after_destroying_mci_k8s_and_before_destroying_mci_feature
  ]
}

resource "time_sleep" "wait_after_destroying_mci_k8s_and_before_destroying_mci_feature" {
  destroy_duration = "300s"
  depends_on = [
    google_gke_hub_feature.multi_cluster_ingress_feature
  ]
}

infra/deploy_kubernetes_manifests.tf:
/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file deploys a Kubernetes Job to the config cluster.
// That Job will deploy Kubernetes resources to all clusters.

locals {
  k8s_deployer_namespace    = "default"
  k8s_service_account_name  = "k8s-manifests-deployer-service-account"
  google_service_account_id = "k8s-manifests-deployer${var.resource_name_suffix}"
}

// Kubernetes (K8s) Job inside the cluser that deploys K8s resources to all clusters.
resource "kubernetes_job" "kubernetes_manifests_deployer_job" {
  metadata {
    name      = "kubernetes-manifests-deployer-job"
    namespace = local.k8s_deployer_namespace
  }
  spec {
    backoff_limit = 6
    completions   = 1
    template {
      metadata {}
      spec {
        service_account_name = local.k8s_service_account_name
        container {
          name  = "kubernetes-manifests-deployer"
          image = "us-docker.pkg.dev/google-samples/containers/gke/kubernetes-manifests-deployer:v0.0.0.3"
          env {
            name  = "PROJECT_ID"
            value = var.project_id
          }
          env {
            name  = "RESOURCE_NAME_SUFFIX"
            value = var.resource_name_suffix
          }
          resources {
            limits = {
              cpu    = "250m"
              memory = "128Mi"
            }
            requests = {
              cpu    = "100m"
              memory = "64Mi"
            }
          }
        }
        restart_policy = "Never"
      }
    }
  }
  wait_for_completion = true
  timeouts {
    create = "900s"
  }
  depends_on = [
    google_container_cluster.my_cluster_europe,
    google_container_cluster.my_cluster_usa,
    google_project_iam_member.google_service_account_is_kubernetes_admin,
    google_service_account_iam_member.allow_kubernetes_sa_to_impersonate_google_cloud_sa,
    kubernetes_service_account.kubernetes_manifests_deployer_service_account,
    module.enable_multi_cluster_google_apis,
  ]
}

// Kubernetes Service Account (different from the Google Cloud Service Account).
resource "kubernetes_service_account" "kubernetes_manifests_deployer_service_account" {
  metadata {
    name      = local.k8s_service_account_name
    namespace = local.k8s_deployer_namespace
    annotations = {
      "iam.gke.io/gcp-service-account" = google_service_account.kubernetes_manifests_deployer_service_account.email
    }
  }
  depends_on = [
    google_container_cluster.my_cluster_config
  ]
}

// The Google Cloud Service Account.
resource "google_service_account" "kubernetes_manifests_deployer_service_account" {
  project      = var.project_id
  account_id   = local.google_service_account_id
  display_name = "Kubernetes Manifests Deployer"
  depends_on = [
    module.enable_base_google_apis
  ]
}

// The Google Cloud Service Account needs to administer Kubernetes resource in all clusters.
resource "google_project_iam_member" "google_service_account_is_kubernetes_admin" {
  project = var.project_id
  role    = "roles/container.admin"
  member  = "serviceAccount:${google_service_account.kubernetes_manifests_deployer_service_account.email}"
}

// Allow the Kubernetes Service Account to impersonate the Google Cloud Service Account.
resource "google_service_account_iam_member" "allow_kubernetes_sa_to_impersonate_google_cloud_sa" {
  service_account_id = google_service_account.kubernetes_manifests_deployer_service_account.name
  role               = "roles/iam.workloadIdentityUser"
  member             = "serviceAccount:${var.project_id}.svc.id.goog[${local.k8s_deployer_namespace}/${local.k8s_service_account_name}]"
  depends_on = [
    kubernetes_service_account.kubernetes_manifests_deployer_service_account
  ]
}

infra/examples/simple_example/README.md:
# Simple Example

This example illustrates how to use the `ecommerce-microservices-on-gke` module.

<!-- BEGINNING OF PRE-COMMIT-TERRAFORM DOCS HOOK -->
## Inputs

| Name | Description | Type | Default | Required |
|------|-------------|------|---------|:--------:|
| project\_id | Google Cloud Project ID | `string` | n/a | yes |

## Outputs

| Name | Description |
|------|-------------|
| deployment\_ip\_address | n/a |

<!-- END OF PRE-COMMIT-TERRAFORM DOCS HOOK -->

## Quickstart

To provision this example, run the following from within this directory:

0. `terraform init` to download the plugins
0. `terraform plan -var 'project_id=my-project-id'` to see the infrastructure plan (where your `my-project-id` is your Google Cloud project ID)
0. `terraform apply -var 'project_id=my-project-id'` to apply the infrastructure build
0. `terraform destroy -var 'project_id=my-project-id'` to destroy the built infrastructure

<!-- BEGINNING OF PRE-COMMIT-TERRAFORM DOCS HOOK -->
## Inputs

| Name | Description | Type | Default | Required |
|------|-------------|------|---------|:--------:|
| project\_id | Google Cloud Project ID | `string` | n/a | yes |

## Outputs

| Name | Description |
|------|-------------|
| deployment\_ip\_address | n/a |

<!-- END OF PRE-COMMIT-TERRAFORM DOCS HOOK -->

infra/examples/simple_example/main.tf:
/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module "ecommerce_microservices_on_gke" {
  source = "../.."

  project_id = var.project_id
}

infra/examples/simple_example/output.tf:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

output "deployment_ip_address" {
  value = module.ecommerce_microservices_on_gke.deployment_ip_address
}

infra/examples/simple_example/variables.tf:
/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

variable "project_id" {
  description = "Google Cloud Project ID"
  type        = string
}

infra/helm_chart_multi_cluster_ingress/Chart.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v2
name: multi-cluster-ingress
# We should use Release Please to bump this with every release.
version: 0.0.0
type: application
# We should use Release Please to bump this with every release.
appVersion: 0.0.0

infra/helm_chart_multi_cluster_ingress/templates/multi_cluster_ingress.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: networking.gke.io/v1beta1
kind: MultiClusterService
metadata:
  name: frontend-multi-cluster-service
  namespace: frontend
spec:
  template:
    spec:
      selector:
        app: frontend # label on the frontend Pods
      ports:
      - name: frontend
        protocol: TCP
        port: 80 # servicePort defined in MultiClusterIngress
        targetPort: 8080 # containerPort of the frontend Pods
  clusters:
  - link: "us-west1/my-cluster-usa{{ .Values.resourceNameSuffix }}"
  - link: "europe-west1/my-cluster-europe{{ .Values.resourceNameSuffix }}"
---
apiVersion: networking.gke.io/v1beta1
kind: MultiClusterIngress
metadata:
  name: frontend-multi-cluster-ingress
  namespace: frontend
  annotations:
    networking.gke.io/static-ip: https://www.googleapis.com/compute/v1/projects/{{ .Values.projectId }}/global/addresses/multi-cluster-ingress-ip-address{{ .Values.resourceNameSuffix }}
spec:
  template:
    spec:
      backend:
       serviceName: frontend-multi-cluster-service
       servicePort: 80

infra/helm_chart_multi_cluster_ingress/values.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This values.yaml file contains default values for the Helm chart.
resourceNameSuffix: "-1"

infra/helm_provider.tf:
/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

provider "helm" {
  kubernetes {
    host                   = "https://${google_container_cluster.my_cluster_config.endpoint}"
    token                  = data.google_client_config.default.access_token
    cluster_ca_certificate = base64decode(google_container_cluster.my_cluster_config.master_auth[0].cluster_ca_certificate)
  }
}

infra/kubernetes_provider.tf:
/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Connect a Kubernetes provider to the config cluster.
provider "kubernetes" {
  host                   = "https://${google_container_cluster.my_cluster_config.endpoint}"
  cluster_ca_certificate = base64decode(google_container_cluster.my_cluster_config.master_auth[0].cluster_ca_certificate)
  token                  = data.google_client_config.default.access_token
}

infra/main.tf:
/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

provider "google" {
  project = var.project_id
}

provider "google-beta" {
  project = var.project_id
}

module "enable_base_google_apis" {
  source                      = "terraform-google-modules/project-factory/google//modules/project_services"
  version                     = "~> 15.0"
  disable_services_on_destroy = false
  activate_apis = [
    "cloudresourcemanager.googleapis.com",
    "container.googleapis.com",
    "iam.googleapis.com",
  ]
  project_id = var.project_id
}

module "enable_multi_cluster_google_apis" {
  source                      = "terraform-google-modules/project-factory/google//modules/project_services"
  version                     = "~> 15.0"
  disable_services_on_destroy = false
  activate_apis = [
    "gkehub.googleapis.com",
    "multiclusteringress.googleapis.com",
    "multiclusterservicediscovery.googleapis.com",
    "trafficdirector.googleapis.com",
  ]
  project_id = var.project_id
}

# Assign a custom service account to the 3 GKE clusters
# because some users' projects will not have the default Compute Engine service account enabled.
resource "google_service_account" "my_service_account" {
  account_id   = "my-service-account${var.resource_name_suffix}"
  display_name = "My Service Account"
  depends_on = [
    module.enable_base_google_apis
  ]
}

resource "google_project_iam_member" "my_service_account_role_metric_writer" {
  project = var.project_id
  role    = "roles/monitoring.metricWriter"
  member  = "serviceAccount:${google_service_account.my_service_account.email}"
}

resource "google_project_iam_member" "my_service_account_role_log_writer" {
  project = var.project_id
  role    = "roles/logging.logWriter"
  member  = "serviceAccount:${google_service_account.my_service_account.email}"
}

resource "google_project_iam_member" "my_service_account_role_monitoring_viewer" {
  project = var.project_id
  role    = "roles/monitoring.viewer"
  member  = "serviceAccount:${google_service_account.my_service_account.email}"
}

resource "google_project_iam_member" "my_service_account_role_stackdriver_writer" {
  project = var.project_id
  role    = "roles/stackdriver.resourceMetadata.writer"
  member  = "serviceAccount:${google_service_account.my_service_account.email}"
}

resource "google_container_cluster" "my_cluster_usa" {
  name                = "my-cluster-usa${var.resource_name_suffix}"
  location            = "us-west1"
  enable_autopilot    = true
  project             = var.project_id
  resource_labels     = var.labels
  deletion_protection = false
  depends_on = [
    module.enable_base_google_apis
  ]
  cluster_autoscaling {
    auto_provisioning_defaults {
      service_account = google_service_account.my_service_account.email
    }
  }
  # Need an empty ip_allocation_policy to overcome an error related to autopilot node pool constraints.
  # Workaround from https://github.com/hashicorp/terraform-provider-google/issues/10782#issuecomment-1024488630
  ip_allocation_policy {
  }
  provider = google-beta # Needed for the google_gkehub_feature Terraform module.
}

resource "google_container_cluster" "my_cluster_europe" {
  name                = "my-cluster-europe${var.resource_name_suffix}"
  location            = "europe-west1"
  enable_autopilot    = true
  project             = var.project_id
  resource_labels     = var.labels
  deletion_protection = false
  depends_on = [
    module.enable_base_google_apis
  ]
  cluster_autoscaling {
    auto_provisioning_defaults {
      service_account = google_service_account.my_service_account.email
    }
  }
  # Need an empty ip_allocation_policy to overcome an error related to autopilot node pool constraints.
  # Workaround from https://github.com/hashicorp/terraform-provider-google/issues/10782#issuecomment-1024488630
  ip_allocation_policy {
  }
  provider = google-beta # Needed for the google_gkehub_feature Terraform module.
}

resource "google_container_cluster" "my_cluster_config" {
  name                = "my-cluster-config${var.resource_name_suffix}"
  location            = "us-west1"
  enable_autopilot    = true
  project             = var.project_id
  resource_labels     = var.labels
  deletion_protection = false
  depends_on = [
    module.enable_base_google_apis
  ]
  cluster_autoscaling {
    auto_provisioning_defaults {
      service_account = google_service_account.my_service_account.email
    }
  }
  # Need an empty ip_allocation_policy to overcome an error related to autopilot node pool constraints.
  # Workaround from https://github.com/hashicorp/terraform-provider-google/issues/10782#issuecomment-1024488630
  ip_allocation_policy {
  }
  provider = google-beta # Needed for the google_gkehub_feature Terraform module.
}

infra/metadata.display.yaml:
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: blueprints.cloud.google.com/v1alpha1
kind: BlueprintMetadata
metadata:
  name: terraform-ecommerce-microservices-on-gke-display
  annotations:
    config.kubernetes.io/local-config: "true"
spec:
  info:
    title: Ecommerce web app deployed on Kubernetes
    source:
      repo: https://github.com/GoogleCloudPlatform/terraform-ecommerce-microservices-on-gke.git
      sourceType: git
      dir: /infra
  ui:
    input:
      variables:
        labels:
          name: labels
          title: Labels
        project_id:
          name: project_id
          title: Project Id
        resource_name_suffix:
          name: resource_name_suffix
          title: Resource Name Suffix

infra/metadata.yaml:
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: blueprints.cloud.google.com/v1alpha1
kind: BlueprintMetadata
metadata:
  name: terraform-ecommerce-microservices-on-gke
  annotations:
    config.kubernetes.io/local-config: "true"
spec:
  info:
    title: Ecommerce web app deployed on Kubernetes
    source:
      repo: https://github.com/GoogleCloudPlatform/terraform-ecommerce-microservices-on-gke.git
      sourceType: git
      dir: /infra
    actuationTool:
      flavor: Terraform
      version: ">= 0.13"
    description: {}
  content:
    examples:
      - name: simple_example
        location: examples/simple_example
  interfaces:
    variables:
      - name: labels
        description: A set of key/value label pairs to assign to the resources deployed by this blueprint.
        varType: map(string)
        defaultValue: {}
      - name: project_id
        description: The Google Cloud project ID.
        varType: string
        required: true
      - name: resource_name_suffix
        description: "  Optional string added to the end of resource names, allowing project reuse.\n  This should be short and only contain dashes, lowercase letters, and digits.\n  It shoud not end with a dash.\n"
        varType: string
        defaultValue: "-1"
    outputs:
      - name: deployment_ip_address
        description: Public IP address of the deployment
      - name: neos_toc_url
        description: Neos Tutorial URL
  requirements:
    roles:
      - level: Project
        roles:
          - roles/compute.networkAdmin
          - roles/container.admin
          - roles/gkehub.editor
          - roles/iam.serviceAccountAdmin
          - roles/iam.serviceAccountUser
          - roles/resourcemanager.projectIamAdmin
          - roles/serviceusage.serviceUsageAdmin
    services:
      - cloudresourcemanager.googleapis.com
      - storage-api.googleapis.com
      - serviceusage.googleapis.com

infra/multi_cluster_service.tf:
/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

resource "google_project_iam_member" "my_service_account_role_network_viewer" {
  project = var.project_id
  role    = "roles/compute.networkViewer"
  member  = "serviceAccount:${google_service_account.my_service_account.email}"
  depends_on = [
    module.enable_base_google_apis
  ]
}

resource "google_compute_global_address" "multi_cluster_ingress_ip_address" {
  provider     = google-beta
  name         = "multi-cluster-ingress-ip-address${var.resource_name_suffix}"
  address_type = "EXTERNAL"
  project      = var.project_id
  depends_on = [
    module.enable_base_google_apis
  ]
}

resource "google_gke_hub_feature" "multi_cluster_ingress_feature" {
  name     = "multiclusteringress"
  location = "global"
  project  = var.project_id
  spec {
    multiclusteringress {
      config_membership = google_gke_hub_membership.my_fleet_membership_config.id
    }
  }
  provider = google-beta
  depends_on = [
    module.enable_multi_cluster_google_apis
  ]
}

resource "google_project_iam_member" "gke_mcs_importer_iam_binding" {
  project = var.project_id
  role    = "roles/compute.networkViewer"
  member  = "serviceAccount:${var.project_id}.svc.id.goog[gke-mcs/gke-mcs-importer]"
  depends_on = [
    resource.google_gke_hub_feature.multi_cluster_ingress_feature
  ]
}

infra/output.tf:
/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

output "deployment_ip_address" {
  description = "Public IP address of the deployment"
  value       = resource.google_compute_global_address.multi_cluster_ingress_ip_address.address
}

output "neos_toc_url" {
  description = "Neos Tutorial URL"
  value       = "https://console.cloud.google.com/products/solutions/deployments?walkthrough_id=solutions-in-console--ecommerce-gke--ecommerce-gke_tour"
}

infra/test/integration/discover_test.go:
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package test

import (
	"testing"

	"github.com/GoogleCloudPlatform/cloud-foundation-toolkit/infra/blueprint-test/pkg/tft"
)

func TestAll(t *testing.T) { // Function name must start with "Test*"
	// This will autodiscover and test the Terraform inside infra/examples/*.
	tft.AutoDiscoverAndTest(t)
}

infra/test/integration/simple_example/simple_example_test.go:
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package simple_example

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"testing"
	"time"

	"github.com/GoogleCloudPlatform/cloud-foundation-toolkit/infra/blueprint-test/pkg/gcloud"
	"github.com/GoogleCloudPlatform/cloud-foundation-toolkit/infra/blueprint-test/pkg/tft"
	"github.com/GoogleCloudPlatform/cloud-foundation-toolkit/infra/blueprint-test/pkg/utils"
	"github.com/stretchr/testify/assert"
)

// Retry if these errors are encountered.
var retryErrors = map[string]string{}

func TestSimpleExample(t *testing.T) {
	example := tft.NewTFBlueprintTest(t)

	example.DefineVerify(func(assert *assert.Assertions) {
		projectId := example.GetTFSetupStringOutput("project_id")
		deploymentIpAddr := example.GetStringOutput("deployment_ip_address")
		deploymentUrl := fmt.Sprintf("http://%s", deploymentIpAddr)
		testDeploymentUrl(t, assert, deploymentUrl)
		testGoogleCloudApis(t, assert, projectId)
	})

	example.Test()
}

func testDeploymentUrl(t *testing.T, assert *assert.Assertions, url string) error {
	for attemptNum := 1; attemptNum <= 60; attemptNum++ {

		// Failed request.
		response, err := http.Get(url)
		if err != nil {
			t.Logf("Deployment URL HTTP request error: %s\n", err)

		} else if 200 <= response.StatusCode && response.StatusCode <= 299 { // Got some 200 responses.
			responseBody, err := ioutil.ReadAll(response.Body)
			if err != nil {
				return err
			}
			responseBodyString := string(responseBody)
			assert.Containsf(responseBodyString, "us-west1", "couldn't find text 'us-west1' in deployment's response")
			assert.Containsf(responseBodyString, "Cymbal Shops", "Couldn't find text 'Cymbal Shops' in deployment's response")
			return nil

		} else { // Got a non-200 response.
			t.Logf("Deployment URL responded with status code: %d.\n", response.StatusCode)
		}

		// Wait before retrying.
		time.Sleep(4 * time.Second)
	}

	t.Logf("Waited too long for deployment URL.\n")
	return nil
}

func testGoogleCloudApis(t *testing.T, assert *assert.Assertions, projectId string) {
	serviceTests := map[string]struct {
		service string
	}{
		"Service container":                    {service: "container"},
		"Service dns":                          {service: "dns"},
		"Service gkehub":                       {service: "gkehub"},
		"Service multiclusteringress":          {service: "multiclusteringress"},
		"Service multiclusterservicediscovery": {service: "multiclusterservicediscovery"},
		"Service trafficdirector":              {service: "trafficdirector"},
	}
	services := gcloud.Run(t, "services list", gcloud.WithCommonArgs([]string{"--project", projectId, "--format", "json"})).Array()
	for _, tc := range serviceTests {
		t.Run(tc.service, func(t *testing.T) {
			match := utils.GetFirstMatchResult(t, services, "config.name", fmt.Sprintf("%s.googleapis.com", tc.service))
			assert.Equal("ENABLED", match.Get("state").String(), "%s service should be enabled", tc.service)
		})
	}
}

infra/test/setup/iam.tf:
/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

locals {
  int_required_roles = [
    "roles/compute.networkAdmin",
    "roles/container.admin",
    "roles/gkehub.editor",
    "roles/iam.serviceAccountAdmin",
    "roles/iam.serviceAccountUser",
    "roles/resourcemanager.projectIamAdmin",
    "roles/serviceusage.serviceUsageAdmin",
  ]
}

resource "google_service_account" "int_test" {
  project      = module.project.project_id
  account_id   = "ci-account"
  display_name = "ci-account"
}

resource "google_project_iam_member" "int_test" {
  count = length(local.int_required_roles)

  project = module.project.project_id
  role    = local.int_required_roles[count.index]
  member  = "serviceAccount:${google_service_account.int_test.email}"
}

resource "google_service_account_key" "int_test" {
  service_account_id = google_service_account.int_test.id
}

infra/test/setup/main.tf:
/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module "project" {
  source  = "terraform-google-modules/project-factory/google"
  version = "~> 15.0"

  name              = "ci-ecomm-microservices"
  random_project_id = "true"
  org_id            = var.org_id
  folder_id         = var.folder_id
  billing_account   = var.billing_account

  activate_apis = [
    "cloudresourcemanager.googleapis.com",
    "storage-api.googleapis.com",
    "serviceusage.googleapis.com"
  ]
}

resource "google_compute_network" "vpc_network" {
  project                 = module.project.project_id
  name                    = "default"
  auto_create_subnetworks = true
}

infra/test/setup/outputs.tf:
/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

output "project_id" {
  value = module.project.project_id
}

output "sa_key" {
  value     = google_service_account_key.int_test.private_key
  sensitive = true
}

infra/test/setup/variables.tf:
/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
variable "org_id" {
  description = "The numeric organization id"
}

variable "folder_id" {
  description = "The folder to deploy in"
}

variable "billing_account" {
  description = "The billing account id associated with the project, e.g. XXXXXX-YYYYYY-ZZZZZZ"
}

infra/test/setup/versions.tf:
/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

terraform {
  required_version = ">= 0.13"
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 5.4"
    }
    google-beta = {
      source  = "hashicorp/google-beta"
      version = "~> 5.4"
    }
  }
}

infra/variables.tf:
/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

variable "labels" {
  type        = map(string)
  default     = {}
  description = "A set of key/value label pairs to assign to the resources deployed by this blueprint."
}

variable "project_id" {
  type        = string
  description = "The Google Cloud project ID."
}

variable "resource_name_suffix" {
  type        = string
  default     = "-1"
  description = <<EOT
  Optional string added to the end of resource names, allowing project reuse.
  This should be short and only contain dashes, lowercase letters, and digits.
  It shoud not end with a dash.
  EOT
}

infra/versions.tf:
/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

terraform {
  required_version = ">= 0.13"
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 5.4"
    }
    google-beta = {
      source  = "hashicorp/google-beta"
      version = "~> 5.4"
    }
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "~> 2.23"
    }
    time = {
      source  = "hashicorp/time"
      version = "~> 0.12"
    }
    template = {
      source  = "hashicorp/template"
      version = "~> 2.2"
    }
    local = {
      source  = "hashicorp/local"
      version = "~> 2.4"
    }
    helm = {
      source  = "hashicorp/helm"
      version = "~> 2.11"
    }
  }
}

kubernetes_manifests_deployer/Dockerfile:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This Docker image is available a URL similar to: us-docker.pkg.dev/google-samples/containers/gke/kubernetes-manifests-deployer:vX.Y.Z

# Some commands needed for the shell scripts: gcloud, kubectl, sed.
FROM google/cloud-sdk:483.0.0-alpine@sha256:170c7f0a92a5bfd06c224f4f7c8fb9c271e2400cb911cfc951d620be90ab7fa5
RUN gcloud components install kubectl gke-gcloud-auth-plugin

WORKDIR /app

COPY kubernetes_manifests/ kubernetes_manifests/
COPY deploy_k8s_resources.sh deploy_k8s_resources.sh
COPY deploy_single_cluster_k8s_resources.sh deploy_single_cluster_k8s_resources.sh
COPY deploy_multi_cluster_k8s_resources.sh deploy_multi_cluster_k8s_resources.sh

# The bash scripts should be executable.
RUN ["chmod", "+x", "/app/deploy_k8s_resources.sh"]
RUN ["chmod", "+x", "/app/deploy_single_cluster_k8s_resources.sh"]
RUN ["chmod", "+x", "/app/deploy_multi_cluster_k8s_resources.sh"]

ENTRYPOINT ./deploy_k8s_resources.sh "${PROJECT_ID}" "${RESOURCE_NAME_SUFFIX}" "kubernetes_manifests/"

kubernetes_manifests_deployer/deploy_k8s_resources.sh:
#!/bin/bash

# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

echo 'Deploying Kubernetes manifests.'

PROJECT_ID=$1
RESOURCE_NAME_SUFFIX=$2
K8S_MANIFESTS_DIR=$3

./deploy_single_cluster_k8s_resources.sh "${PROJECT_ID}" "${RESOURCE_NAME_SUFFIX}" "${K8S_MANIFESTS_DIR}"
./deploy_multi_cluster_k8s_resources.sh "${PROJECT_ID}" "${RESOURCE_NAME_SUFFIX}" "${K8S_MANIFESTS_DIR}"

kubernetes_manifests_deployer/deploy_multi_cluster_k8s_resources.sh:
#!/bin/bash

# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Script parameters
PROJECT_ID=$1
RESOURCE_NAME_SUFFIX=$2
K8S_MANIFESTS_DIR=$3

CLUSTER_CONTEXT_EUROPE=gke_${PROJECT_ID}_europe-west1_my-cluster-europe${RESOURCE_NAME_SUFFIX}
CLUSTER_CONTEXT_CONFIG=gke_${PROJECT_ID}_us-west1_my-cluster-config${RESOURCE_NAME_SUFFIX}
CLUSTER_CONTEXT_USA=gke_${PROJECT_ID}_us-west1_my-cluster-usa${RESOURCE_NAME_SUFFIX}

wait_for_crd() {
  CRD=$1
  CLUSTER_CONTEXT=$2
  NAMESPACE=$3

  echo "Waiting for CRD ${CRD} to be created in cluster ${CLUSTER_CONTEXT}..."
  SECONDS_WAITED=0
  IS_CRD_CREATED=$(kubectl --context "${CLUSTER_CONTEXT}" get "crd/${CRD}" -n="${NAMESPACE}" 2>/dev/null)
  while [[ (${IS_CRD_CREATED} == "") && ${SECONDS_WAITED} -lt 60 ]]; do
    IS_CRD_CREATED=$(kubectl --context "${CLUSTER_CONTEXT}" get "crd/${CRD}" -n="${NAMESPACE}" 2>/dev/null)
    sleep 1s
    SECONDS_WAITED=$((SECONDS_WAITED+1))
  done

  if [[ ${IS_CRD_CREATED} ]]; then
    echo "CRD ${CRD} has been created in cluster ${CLUSTER_CONTEXT}. Waited ${SECONDS_WAITED}s."
  else
    echo "Timed out! Waited too long for ${CRD} to be created in cluster ${CLUSTER_CONTEXT}. Waited ${SECONDS_WAITED}s."
  fi
}

# Deploy Multi Cluster Ingress configuration.
sed -i "s/RESOURCE_NAME_SUFFIX/${RESOURCE_NAME_SUFFIX}/g" "${K8S_MANIFESTS_DIR}/multi_cluster_ingress.yaml"
sed -i "s/PROJECT_ID/${PROJECT_ID}/g" "${K8S_MANIFESTS_DIR}/multi_cluster_ingress.yaml"
wait_for_crd "multiclusterservices.networking.gke.io" "${CLUSTER_CONTEXT_CONFIG}" "frontend"
wait_for_crd "multiclusteringresses.networking.gke.io" "${CLUSTER_CONTEXT_CONFIG}" "frontend"
kubectl --context="${CLUSTER_CONTEXT_CONFIG}" \
  apply -f "${K8S_MANIFESTS_DIR}/multi_cluster_ingress.yaml"

# Deploy the redis-cart Service into the US cluster.
# This redis-cart Service gets exported to the other clusters.
wait_for_crd "serviceexports.net.gke.io" "${CLUSTER_CONTEXT_USA}" "cartservice"
kubectl --context="${CLUSTER_CONTEXT_USA}" \
  apply -f "${K8S_MANIFESTS_DIR}/redis_cart/"

# Update the address of the redis-cart used in the Europe cluster.
sed -i "s/redis-cart.cartservice:6379/redis-cart.cartservice.svc.clusterset.local:6379/g" \
  "${K8S_MANIFESTS_DIR}/cartservice/cartservice.yaml"
kubectl --context="${CLUSTER_CONTEXT_EUROPE}" \
  "${K8S_MANIFESTS_DIR}/cartservice/cartservice.yaml"
kubectl --context="${CLUSTER_CONTEXT_EUROPE}" \
  --namespace=cartservice \
  apply -f "${K8S_MANIFESTS_DIR}/cartservice/cartservice.yaml"

kubernetes_manifests_deployer/deploy_single_cluster_k8s_resources.sh:
#!/bin/bash

# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Script parameters
PROJECT_ID=$1
RESOURCE_NAME_SUFFIX=$2
K8S_MANIFESTS_DIR=$3

CLUSTER_CONTEXT_EUROPE=gke_${PROJECT_ID}_europe-west1_my-cluster-europe${RESOURCE_NAME_SUFFIX}
CLUSTER_CONTEXT_CONFIG=gke_${PROJECT_ID}_us-west1_my-cluster-config${RESOURCE_NAME_SUFFIX}
CLUSTER_CONTEXT_USA=gke_${PROJECT_ID}_us-west1_my-cluster-usa${RESOURCE_NAME_SUFFIX}

# Connect to the 3 clusters that we just created.
gcloud container clusters get-credentials "my-cluster-europe${RESOURCE_NAME_SUFFIX}" \
  --project "${PROJECT_ID}" \
  --region europe-west1
gcloud container clusters get-credentials "my-cluster-usa${RESOURCE_NAME_SUFFIX}" \
  --project "${PROJECT_ID}" \
  --region us-west1
gcloud container clusters get-credentials "my-cluster-config${RESOURCE_NAME_SUFFIX}" \
  --project "${PROJECT_ID}" \
  --region us-west1

app_namespaces=(adservice cartservice checkoutservice currencyservice emailservice frontend paymentservice productcatalogservice recommendationservice shippingservice)

# Create namespaces.
# Some Namespaces (especially in my-cluster-config) will be unused.
kubectl --context="${CLUSTER_CONTEXT_USA}" \
  apply -f "${K8S_MANIFESTS_DIR}/namespaces.yaml"
kubectl --context="${CLUSTER_CONTEXT_EUROPE}" \
  apply -f "${K8S_MANIFESTS_DIR}/namespaces.yaml"
kubectl --context="${CLUSTER_CONTEXT_CONFIG}" \
  apply -f "${K8S_MANIFESTS_DIR}/namespaces.yaml"

# Deploy most of the microservices.
for namespace in "${app_namespaces[@]}";
do
  kubectl --context="${CLUSTER_CONTEXT_USA}" \
    apply -f "${K8S_MANIFESTS_DIR}/${namespace}/"
  kubectl --context="${CLUSTER_CONTEXT_EUROPE}" \
    apply -f "${K8S_MANIFESTS_DIR}/${namespace}/"
done

kubernetes_manifests_deployer/kubernetes_manifests/adservice/adservice.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: adservice
  namespace: adservice
spec:
  selector:
    matchLabels:
      app: adservice
  template:
    metadata:
      labels:
        app: adservice
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/adservice:v0.7.0
        ports:
        - containerPort: 9555
        env:
        - name: PORT
          value: "9555"
        resources:
          requests:
            cpu: 200m
            memory: 180Mi
          limits:
            cpu: 300m
            memory: 300Mi
        readinessProbe:
          initialDelaySeconds: 20
          periodSeconds: 15
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:9555"]
        livenessProbe:
          initialDelaySeconds: 20
          periodSeconds: 15
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:9555"]
---
apiVersion: v1
kind: Service
metadata:
  name: adservice
  namespace: adservice
spec:
  type: ClusterIP
  selector:
    app: adservice
  ports:
  - name: grpc
    port: 9555
    targetPort: 9555

kubernetes_manifests_deployer/kubernetes_manifests/cartservice/cartservice.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: cartservice
  namespace: cartservice
spec:
  selector:
    matchLabels:
      app: cartservice
  template:
    metadata:
      labels:
        app: cartservice
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/cartservice:v0.7.0
        ports:
        - containerPort: 7070
        env:
        - name: REDIS_ADDR
          value: "redis-cart.cartservice:6379"
        - name: CYMBAL_BRANDING
          value: "true"
        resources:
          requests:
            cpu: 200m
            memory: 64Mi
          limits:
            cpu: 300m
            memory: 128Mi
        readinessProbe:
          initialDelaySeconds: 15
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:7070", "-rpc-timeout=5s"]
        livenessProbe:
          initialDelaySeconds: 15
          periodSeconds: 10
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:7070", "-rpc-timeout=5s"]
---
apiVersion: v1
kind: Service
metadata:
  name: cartservice
  namespace: cartservice
spec:
  type: ClusterIP
  selector:
    app: cartservice
  ports:
  - name: grpc
    port: 7070
    targetPort: 7070

kubernetes_manifests_deployer/kubernetes_manifests/checkoutservice/checkoutservice.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkoutservice
  namespace: checkoutservice
spec:
  selector:
    matchLabels:
      app: checkoutservice
  template:
    metadata:
      labels:
        app: checkoutservice
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: server
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
          image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.7.0
          ports:
          - containerPort: 5050
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:5050"]
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:5050"]
          env:
          - name: PORT
            value: "5050"
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: "productcatalogservice.productcatalogservice:3550"
          - name: SHIPPING_SERVICE_ADDR
            value: "shippingservice.shippingservice:50051"
          - name: PAYMENT_SERVICE_ADDR
            value: "paymentservice.paymentservice:50051"
          - name: EMAIL_SERVICE_ADDR
            value: "emailservice.emailservice:5000"
          - name: CURRENCY_SERVICE_ADDR
            value: "currencyservice.currencyservice:7000"
          - name: CART_SERVICE_ADDR
            value: "cartservice.cartservice:7070"
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: checkoutservice
  namespace: checkoutservice
spec:
  type: ClusterIP
  selector:
    app: checkoutservice
  ports:
  - name: grpc
    port: 5050
    targetPort: 5050

kubernetes_manifests_deployer/kubernetes_manifests/currencyservice/currencyservice.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: currencyservice
  namespace: currencyservice
spec:
  selector:
    matchLabels:
      app: currencyservice
  template:
    metadata:
      labels:
        app: currencyservice
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/currencyservice:v0.7.0
        ports:
        - name: grpc
          containerPort: 7000
        env:
        - name: PORT
          value: "7000"
        - name: DISABLE_PROFILER
          value: "1"
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:7000"]
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:7000"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: currencyservice
  namespace: currencyservice
spec:
  type: ClusterIP
  selector:
    app: currencyservice
  ports:
  - name: grpc
    port: 7000
    targetPort: 7000

kubernetes_manifests_deployer/kubernetes_manifests/emailservice/emailservice.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: emailservice
  namespace: emailservice
spec:
  selector:
    matchLabels:
      app: emailservice
  template:
    metadata:
      labels:
        app: emailservice
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/emailservice:v0.7.0
        ports:
        - containerPort: 8080
        env:
        - name: PORT
          value: "8080"
        - name: DISABLE_PROFILER
          value: "1"
        readinessProbe:
          periodSeconds: 5
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:8080"]
        livenessProbe:
          periodSeconds: 5
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:8080"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: emailservice
  namespace: emailservice
spec:
  type: ClusterIP
  selector:
    app: emailservice
  ports:
  - name: grpc
    port: 5000
    targetPort: 8080

kubernetes_manifests_deployer/kubernetes_manifests/frontend/frontend.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: frontend
spec:
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: server
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
          image: gcr.io/google-samples/microservices-demo/frontend:v0.7.0
          ports:
          - containerPort: 8080
          readinessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: "/_healthz"
              port: 8080
              httpHeaders:
              - name: "Cookie"
                value: "shop_session-id=x-readiness-probe"
          livenessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: "/_healthz"
              port: 8080
              httpHeaders:
              - name: "Cookie"
                value: "shop_session-id=x-liveness-probe"
          env:
          - name: PORT
            value: "8080"
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: "productcatalogservice.productcatalogservice:3550"
          - name: CURRENCY_SERVICE_ADDR
            value: "currencyservice.currencyservice:7000"
          - name: CART_SERVICE_ADDR
            value: "cartservice.cartservice:7070"
          - name: RECOMMENDATION_SERVICE_ADDR
            value: "recommendationservice.recommendationservice:8080"
          - name: SHIPPING_SERVICE_ADDR
            value: "shippingservice.shippingservice:50051"
          - name: CHECKOUT_SERVICE_ADDR
            value: "checkoutservice.checkoutservice:5050"
          - name: AD_SERVICE_ADDR
            value: "adservice.adservice:9555"
          - name: ENABLE_PROFILER
            value: "0"
          - name: CYMBAL_BRANDING
            value: "true"
          - name: FRONTEND_MESSAGE
            value: ""
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi

kubernetes_manifests_deployer/kubernetes_manifests/multi_cluster_ingress.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: networking.gke.io/v1beta1
kind: MultiClusterService
metadata:
  name: frontend-multi-cluster-service
  namespace: frontend
  # These Helm-related Annotations/Labels allow the Helm (inside Terraform) to control this resource.
  labels:
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: helm-chart-multi-cluster-ingress
    meta.helm.sh/release-namespace: frontend
spec:
  template:
    spec:
      selector:
        app: frontend # label on the frontend Pods
      ports:
      - name: frontend
        protocol: TCP
        port: 80 # servicePort defined in MultiClusterIngress
        targetPort: 8080 # containerPort of the frontend Pods
  clusters:
  - link: "us-west1/my-cluster-usaRESOURCE_NAME_SUFFIX"
  - link: "europe-west1/my-cluster-europeRESOURCE_NAME_SUFFIX"
---
apiVersion: networking.gke.io/v1beta1
kind: MultiClusterIngress
metadata:
  name: frontend-multi-cluster-ingress
  namespace: frontend
  # These Helm-related Annotations/Labels allow the Helm (inside Terraform) to control this resource.
  labels:
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: helm-chart-multi-cluster-ingress
    meta.helm.sh/release-namespace: frontend
    networking.gke.io/static-ip: https://www.googleapis.com/compute/v1/projects/PROJECT_ID/global/addresses/multi-cluster-ingress-ip-addressRESOURCE_NAME_SUFFIX
spec:
  template:
    spec:
      backend:
       serviceName: frontend-multi-cluster-service
       servicePort: 80

kubernetes_manifests_deployer/kubernetes_manifests/namespaces.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Namespace
metadata:
  name: adservice
---
apiVersion: v1
kind: Namespace
metadata:
  name: cartservice
---
apiVersion: v1
kind: Namespace
metadata:
  name: checkoutservice
---
apiVersion: v1
kind: Namespace
metadata:
  name: currencyservice
---
apiVersion: v1
kind: Namespace
metadata:
  name: emailservice
---
apiVersion: v1
kind: Namespace
metadata:
  name: frontend
---
apiVersion: v1
kind: Namespace
metadata:
  name: paymentservice
---
apiVersion: v1
kind: Namespace
metadata:
  name: productcatalogservice
---
apiVersion: v1
kind: Namespace
metadata:
  name: recommendationservice
---
apiVersion: v1
kind: Namespace
metadata:
  name: shippingservice

kubernetes_manifests_deployer/kubernetes_manifests/paymentservice/paymentservice.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: paymentservice
  namespace: paymentservice
spec:
  selector:
    matchLabels:
      app: paymentservice
  template:
    metadata:
      labels:
        app: paymentservice
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/paymentservice:v0.7.0
        ports:
        - containerPort: 50051
        env:
        - name: PORT
          value: "50051"
        - name: DISABLE_PROFILER
          value: "1"
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:50051"]
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:50051"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: paymentservice
  namespace: paymentservice
spec:
  type: ClusterIP
  selector:
    app: paymentservice
  ports:
  - name: grpc
    port: 50051
    targetPort: 50051

kubernetes_manifests_deployer/kubernetes_manifests/productcatalogservice/productcatalogservice.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: productcatalogservice
  namespace: productcatalogservice
spec:
  selector:
    matchLabels:
      app: productcatalogservice
  template:
    metadata:
      labels:
        app: productcatalogservice
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.7.0
        ports:
        - containerPort: 3550
        env:
        - name: PORT
          value: "3550"
        - name: DISABLE_PROFILER
          value: "1"
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:3550"]
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:3550"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: productcatalogservice
  namespace: productcatalogservice
spec:
  type: ClusterIP
  selector:
    app: productcatalogservice
  ports:
  - name: grpc
    port: 3550
    targetPort: 3550

kubernetes_manifests_deployer/kubernetes_manifests/recommendationservice/recommendationservice.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: recommendationservice
  namespace: recommendationservice
spec:
  selector:
    matchLabels:
      app: recommendationservice
  template:
    metadata:
      labels:
        app: recommendationservice
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.7.0
        ports:
        - containerPort: 8080
        readinessProbe:
          periodSeconds: 5
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:8080"]
        livenessProbe:
          periodSeconds: 5
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:8080"]
        env:
        - name: PORT
          value: "8080"
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: "productcatalogservice.productcatalogservice:3550"
        - name: DISABLE_PROFILER
          value: "1"
        resources:
          requests:
            cpu: 100m
            memory: 220Mi
          limits:
            cpu: 200m
            memory: 450Mi
---
apiVersion: v1
kind: Service
metadata:
  name: recommendationservice
  namespace: recommendationservice
spec:
  type: ClusterIP
  selector:
    app: recommendationservice
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080

kubernetes_manifests_deployer/kubernetes_manifests/redis_cart/redis_cart.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-cart
  namespace: cartservice
spec:
  selector:
    matchLabels:
      app: redis-cart
  template:
    metadata:
      labels:
        app: redis-cart
    spec:
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: redis
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: redis:alpine
        ports:
        - containerPort: 6379
        readinessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 6379
        livenessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 6379
        volumeMounts:
        - mountPath: /data
          name: redis-data
        resources:
          limits:
            memory: 256Mi
            cpu: 125m
          requests:
            cpu: 70m
            memory: 200Mi
      volumes:
      - name: redis-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: redis-cart
  namespace: cartservice
spec:
  type: ClusterIP
  selector:
    app: redis-cart
  ports:
  - name: tcp-redis
    port: 6379
    targetPort: 6379

kubernetes_manifests_deployer/kubernetes_manifests/redis_cart/redis_cart_service_export.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: net.gke.io/v1
kind: ServiceExport
metadata:
 namespace: cartservice
 name: redis-cart

kubernetes_manifests_deployer/kubernetes_manifests/shippingservice/shippingservice.yaml:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: shippingservice
  namespace: shippingservice
spec:
  selector:
    matchLabels:
      app: shippingservice
  template:
    metadata:
      labels:
        app: shippingservice
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/shippingservice:v0.7.0
        ports:
        - containerPort: 50051
        env:
        - name: PORT
          value: "50051"
        - name: DISABLE_PROFILER
          value: "1"
        readinessProbe:
          periodSeconds: 5
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:50051"]
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:50051"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: shippingservice
  namespace: shippingservice
spec:
  type: ClusterIP
  selector:
    app: shippingservice
  ports:
  - name: grpc
    port: 50051
    targetPort: 50051

tutorial.md:
<walkthrough-metadata>
  <meta name="title" content="Edit Jumpstart Solution and deploy tutorial " />
  <meta name="description" content="Make it mine neos tutorial" />
  <meta name="component_id" content="1361081" />
  <meta name="short_id" content="true" />
</walkthrough-metadata>

# Customize an Ecommerce web application deployed on Kubernetes Solution

Learn how to build and deploy your own proof of concept based on the deployed [Ecommerce web application deployed on Kubernetes](https://console.cloud.google.com/products/solutions/details/ecomm-microservices) Jump Start Solution. You can customize the Jump Start Solution deployment by creating a copy of the source code. You can modify the infrastructure and application code as needed and redeploy the solution with the changes.

To avoid conflicts, only one user should modify and deploy a solution in a single Google Cloud project.

## Open cloned repository as workspace

Open the directory where the repository is cloned as a workspace in the editor, follow the steps based on whether you are using the Cloud Shell Editor in Preview Mode or Legacy Mode.

---
**Legacy Cloud Shell Editor**

1. Go to the `File` menu.
2. Select `Open Workspace`.
3. Choose the directory where the repository has been cloned. This directory is the current directory in the cloud shell terminal.

**New Cloud Shell Editor**

1. Go the hamburger icon located in the top left corner of the editor.
2. Go to the `File` Menu.
3. Select `Open Folder`.
4. Choose the directory where the repository has been cloned. This directory is the current directory in the cloud shell terminal.

## Before you begin

We also strongly recommend that you familiarize yourself with the Ecommerce web application deployed on Kubernetes solution.

NOTE: A change in the infrastructure code might cause a change in the incurred cost.

---
**Create an automated deployment**

Run the <walkthrough-editor-open-file filePath="./deploy_solution.sh">deploy_solution.sh</walkthrough-editor-open-file> script.

```bash
./deploy_solution.sh
```

---
**Monitor the deployment**

Get the deployment details.

```bash
gcloud infra-manager deployments describe <var>DEPLOYMENT_NAME</var> --location <var>REGION</var>
```

Monitor your deployment at [Solution deployments page](https://console.cloud.google.com/products/solutions/deployments?pageState=(%22deployments%22:(%22f%22:%22%255B%257B_22k_22_3A_22Labels_22_2C_22t_22_3A13_2C_22v_22_3A_22_5C_22modification-reason%2520_3A%2520make-it-mine_5C_22_22_2C_22s_22_3Atrue_2C_22i_22_3A_22deployment.labels_22%257D%255D%22))).

## Save your edits to the solution

Use any of the following methods to save your edits to the solution

---
**Download the solution**

To download your solution, in the `File` menu, select `Download Workspace`. The solution is downloaded in a compressed format.


---
**Save the solution to your Git repository**

Set the remote URL to your Git repository
```bash
git remote set-url origin [git-repo-url]
```

Review the modified files, commit and push to your remote repository branch.

## Delete the deployed solution

Optional: Use one of the below options in case you want to delete the deployed solution

* Go to [Solution deployments page](https://console.cloud.google.com/products/solutions/deployments?pageState=(%22deployments%22:(%22f%22:%22%255B%257B_22k_22_3A_22Labels_22_2C_22t_22_3A13_2C_22v_22_3A_22_5C_22modification-reason%2520_3A%2520make-it-mine_5C_22_22_2C_22s_22_3Atrue_2C_22i_22_3A_22deployment.labels_22%257D%255D%22))).
* Click on the link under "Deployment name". It will take you to the deployment details page for the solution.
* Click on the "DELETE" button located at the top right corner of the page.
<walkthrough-inline-feedback></walkthrough-inline-feedback>
